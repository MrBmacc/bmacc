/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as CreateImport } from "./routes/create";
import { Route as IndexImport } from "./routes/index";
import { Route as TipSlugImport } from "./routes/tip.$slug";
import { Route as ProfileSlugImport } from "./routes/profile.$slug";

// Create/Update Routes

const CreateRoute = CreateImport.update({
  id: "/create",
  path: "/create",
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const TipSlugRoute = TipSlugImport.update({
  id: "/tip/$slug",
  path: "/tip/$slug",
  getParentRoute: () => rootRoute,
} as any);

const ProfileSlugRoute = ProfileSlugImport.update({
  id: "/profile/$slug",
  path: "/profile/$slug",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/create": {
      id: "/create";
      path: "/create";
      fullPath: "/create";
      preLoaderRoute: typeof CreateImport;
      parentRoute: typeof rootRoute;
    };
    "/profile/$slug": {
      id: "/profile/$slug";
      path: "/profile/$slug";
      fullPath: "/profile/$slug";
      preLoaderRoute: typeof ProfileSlugImport;
      parentRoute: typeof rootRoute;
    };
    "/tip/$slug": {
      id: "/tip/$slug";
      path: "/tip/$slug";
      fullPath: "/tip/$slug";
      preLoaderRoute: typeof TipSlugImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/create": typeof CreateRoute;
  "/profile/$slug": typeof ProfileSlugRoute;
  "/tip/$slug": typeof TipSlugRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/create": typeof CreateRoute;
  "/profile/$slug": typeof ProfileSlugRoute;
  "/tip/$slug": typeof TipSlugRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/create": typeof CreateRoute;
  "/profile/$slug": typeof ProfileSlugRoute;
  "/tip/$slug": typeof TipSlugRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/create" | "/profile/$slug" | "/tip/$slug";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/create" | "/profile/$slug" | "/tip/$slug";
  id: "__root__" | "/" | "/create" | "/profile/$slug" | "/tip/$slug";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  CreateRoute: typeof CreateRoute;
  ProfileSlugRoute: typeof ProfileSlugRoute;
  TipSlugRoute: typeof TipSlugRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateRoute: CreateRoute,
  ProfileSlugRoute: ProfileSlugRoute,
  TipSlugRoute: TipSlugRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/create",
        "/profile/$slug",
        "/tip/$slug"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/profile/$slug": {
      "filePath": "profile.$slug.tsx"
    },
    "/tip/$slug": {
      "filePath": "tip.$slug.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
